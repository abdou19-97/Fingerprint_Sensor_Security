from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.fernet import Fernet

# Generate a key pair
private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
public_key = private_key.public_key()

# Enroll Fingerprint
enrolled_fingerprint = enroll_finger()

# Encrypt Fingerprint
encrypted_fingerprint = public_key.encrypt(
    enrolled_fingerprint, padding.OAEP(mgf=padding.MGF1(algorithm=hashes.SHA256()), algorithm=hashes.SHA256(), label=None))

# Store Encrypted Fingerprint
with open('encrypted_fingerprint.txt', 'wb') as f:
    f.write(encrypted_fingerprint)

# Retrieve Encrypted Fingerprint
with open('encrypted_fingerprint.txt', 'rb') as f:
    encrypted_fingerprint = f.read()

# Decrypt Fingerprint
decrypted_fingerprint = private_key.decrypt(
    encrypted_fingerprint, padding.OAEP(mgf=padding.MGF1(algorithm=hashes.SHA256()), algorithm=hashes.SHA256(), label=None))

# Authenticate Fingerprint
if decrypted_fingerprint == enrolled_fingerprint:
    print('Fingerprint matched')
else:
    print('Fingerprint did not match')
